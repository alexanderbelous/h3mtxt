#include <h3mtxt/parseh3m.h>
#include <h3mtxt/writeText.h>
#include <h3mtxt/writeh3m.h>

#include <filesystem>
#include <fstream>
#include <iostream>
#include <random>
#include <stdexcept>

namespace fs = std::filesystem;

namespace
{
  h3m::PlayerSpecs generateTestPlayerSpecs()
  {
    return h3m::PlayerSpecs{
      .can_be_human = false,
      .can_be_computer = false,
      .behavior = h3m::PlayerBehavior::Random,
      .customized_alignments = false,
      .allowed_alignments {},
      .random_town = false,
      .main_town {},
      .starting_hero {
        .is_random = false,
        .type = static_cast<h3m::HeroType>(0xFF),
        .face = 0
      },
      .additional_info {}
    };
  }

  h3m::Map generateTestMap()
  {
    constexpr std::uint32_t kMapSize = 36;

    h3m::Map map {
      .format = h3m::MapFormat::ShadowOfDeath,
      .basic_info {
        .is_playable = false,
        .map_size = kMapSize,
        .has_two_levels = false,
        .name = "Test map",
        .description = "Test map generated by h3mparser.",
        .difficulty = h3m::MapDifficulty::Easy,
        .max_hero_level = 0
      },
      .players {
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs(),
        generateTestPlayerSpecs()
      },
      .additional_info {
        // Normal victory condition.
        .victory_condition {},
        // Normal loss condition.
        .loss_condition {},
        // No teams.
        .teams {},
        // Enable all heroes.
        .heroes_availability = h3m::HeroesAvailability::makeAllAvailability(),
        // No placeholder heroes.
        .placeholder_heroes {},
        // No custom heroes.
        .custom_heroes {},
        .reserved {},
        .artifacts_nonavailability {},
        .spells_nonavailability {},
        .skills_nonavailability {},
        .rumors {
          h3m::Rumor {
            .name = "Rumor",
            .description = "This is the only rumor."
          }
        },
        // No heroes with customized settings.
        .heroes_settings {}
      },
      .tiles = std::vector<h3m::Tile>(kMapSize * kMapSize, h3m::Tile{
        .terrain_type = h3m::TerrainType::Rock,
        .terrain_sprite = 0
      }),
      .global_events {
        h3m::GlobalEvent {
          .name = "Global event",
          .message = "Enjoy some resources.",
          .resources {10, 5, 10, 5, 5, 5, 1000},
          .affected_players = h3m::BitSet<1>(std::array<std::uint8_t, 1> {0xFF}),
          .applies_to_human = true,
          .applies_to_computer = true,
          .day_of_first_occurence = 0,
          .repeat_after_days = 0
        }
      }
    };
    return map;
  }

  void fillWithWaterTiles(h3m::Map& map)
  {
    std::random_device rd;
    std::mt19937 gen(rd());
    // Sprites [21; 32] look like non-coastal Water tiles.
    std::uniform_int_distribution<> distrib(21, 32);

    // Set random water tiles.
    for (h3m::Tile& tile : map.tiles)
    {
      tile.terrain_type = h3m::TerrainType::Water;
      tile.terrain_sprite = distrib(gen);
      // Note: we can apply random mirroring as well. The official Map Editor doesn't
      // apply mirroring to non-coastal Water tiles (and switches it off if you modify a
      // water region with mirrored non-coastal tiles).
      tile.mirroring = 0;
    }
  }

  // Access the specified tile.
  // \param map - input map.
  // \param x - X coordinate of the tile.
  // \param y - Y coordinate of the tile.
  // \return the tile (x, y) or nullptr if x >= map_size or y >= map_size.
  h3m::Tile* safeGetTile(h3m::Map& map, std::uint32_t x, std::uint32_t y)
  {
    const std::uint32_t map_size = map.basic_info.map_size;
    if (x >= map_size || y >= map_size)
    {
      return nullptr;
    }
    return &map.tiles[static_cast<std::size_t>(y) * map_size + x];
  }

  // Draws a "fake" island at the specified location.
  //
  // A "fake" island is a 4x4 region with specific Water tiles, which
  // look like a diamond-shaped spot of land, but actually it's all water.
  // \param map - map to modify.
  // \param x - X coordinate of the top left corner of the region.
  // \param y - Y coordinate of the top left corner of the region.
  void drawFakeIsland(h3m::Map& map, std::uint32_t x, std::uint32_t y)
  {
    if (h3m::Tile* tile = safeGetTile(map, x, y + 1))
    {
      tile->terrain_sprite = 19;
      tile->mirroring = 0;
    }
    if (h3m::Tile* tile = safeGetTile(map, x, y + 2))
    {
      tile->terrain_sprite = 13;
      tile->mirroring = 2;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y))
    {
      tile->terrain_sprite = 19;
      tile->mirroring = 0;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y + 1))
    {
      tile->terrain_sprite = 17; // 16 also works
      tile->mirroring = 3;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y + 2))
    {
      tile->terrain_sprite = 17;
      tile->mirroring = 1;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y + 3))
    {
      tile->terrain_sprite = 13;
      tile->mirroring = 2;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 2, y))
    {
      tile->terrain_sprite = 13;
      tile->mirroring = 1;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 2, y + 1))
    {
      tile->terrain_sprite = 17;
      tile->mirroring = 2;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 2, y + 2))
    {
      tile->terrain_sprite = 17;
      tile->mirroring = 0;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 2, y + 3))
    {
      tile->terrain_sprite = 15;
      tile->mirroring = 3;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 3, y + 1))
    {
      tile->terrain_sprite = 13;
      tile->mirroring = 1;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 3, y + 2))
    {
      tile->terrain_sprite = 15;
      tile->mirroring = 3;
    }
  }

  // Draws a "fake" mini-island at the specified location.
  //
  // A "fake" mini-island is a 2x2 region with specific Water tiles, which
  // look as if there's a small spot of land in the center, but actually it's all water.
  // \param map - map to modify.
  // \param x - X coordinate of the top left corner of the mini-island.
  // \param y - Y coordinate of the top left corner of the mini-island.
  void drawFakeMiniIsland(h3m::Map& map, std::uint32_t x, std::uint32_t y)
  {
    // Sprites [12; 15] v [18; 19] look like coast in the SouthEastern corner of the tile.
    constexpr std::uint8_t kSprites[] = { 12, 13, 14, 15, 18, 19 };
    constexpr std::size_t kNumSprites = std::size(kSprites);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(0, kNumSprites - 1);
    const auto generate_random_sprite = [&]() {
      return kSprites[distrib(gen)];
      };

    if (h3m::Tile* tile = safeGetTile(map, x, y))
    {
      tile->terrain_sprite = generate_random_sprite();
      tile->mirroring = 0;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y))
    {
      tile->terrain_sprite = generate_random_sprite();
      tile->mirroring = 1;
    }
    if (h3m::Tile* tile = safeGetTile(map, x, y + 1))
    {
      tile->terrain_sprite = generate_random_sprite();
      tile->mirroring = 2;
    }
    if (h3m::Tile* tile = safeGetTile(map, x + 1, y + 1))
    {
      tile->terrain_sprite = generate_random_sprite();
      tile->mirroring = 3;
    }
  }

  // Draws a "fake" vertical strip of land at the specified location.
  //
  // A "fake" vertical strip of land is a 2xN region with specific Water tiles, which
  // look as if it's thin strip of land, but actually it's all water.
  // \param map - map to modify.
  // \param x - X coordinate of the top left corner of the strip.
  // \param y - Y coordinate of the top left corner of the strip.
  // \param length - the length of the strip in H3M tiles.
  void drawFakeVerticalLandStrip(h3m::Map& map, std::uint32_t x, std::uint32_t y, std::uint32_t length)
  {
    // Sprites [4; 7] look like coast to the West of the tile.
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> distrib(4, 7);
    const auto generate_random_sprite = [&]() {
      return distrib(gen);
      };

    for (std::uint32_t i = 0; i < length; ++i)
    {
      if (h3m::Tile* tile = safeGetTile(map, x, y + i))
      {
        tile->terrain_sprite = generate_random_sprite();
        tile->mirroring = 1;
      }
      if (h3m::Tile* tile = safeGetTile(map, x + 1, y + i))
      {
        tile->terrain_sprite = generate_random_sprite();
        tile->mirroring = 0;
      }
    }
  }

  // (N+4)xN region which looks like a diagonal strip of land from NW to SE, but actually it's all water.
  void drawFakeDiagonalLandStripSE(h3m::Map& map, std::uint32_t x, std::uint32_t y, std::uint32_t length)
  {
    std::random_device rd;
    std::mt19937 gen(rd());
    // Sprites [12; 15] v [18; 19] look like coast in the SouthEastern corner of the tile.
    constexpr std::uint8_t kCornerCoastSprites[] = { 12, 13, 14, 15, 18, 19 };
    std::uniform_int_distribution<> corner_coast_distrib(0, std::size(kCornerCoastSprites) - 1);
    const auto generate_corner_coast_sprite = [&]() {
      return kCornerCoastSprites[corner_coast_distrib(gen)];
      };
    // Sprites [16; 17] look like diagonal coast NorthWest of the tile.
    std::uniform_int_distribution<> diagonal_coast_distrib(16, 17);
    const auto generate_diagonal_coast_sprite = [&]() {
      return diagonal_coast_distrib(gen);
      };

    for (std::uint32_t i = 0; i < length; ++i)
    {
      if (h3m::Tile* tile = safeGetTile(map, x + i, y + i))
      {
        tile->terrain_sprite = generate_corner_coast_sprite();
        tile->mirroring = 2;
      }
      if (h3m::Tile* tile = safeGetTile(map, x + i + 1, y + i))
      {
        tile->terrain_sprite = generate_diagonal_coast_sprite();
        tile->mirroring = 1;
      }
      if (h3m::Tile* tile = safeGetTile(map, x + i + 2, y + i))
      {
        tile->terrain_sprite = generate_diagonal_coast_sprite();
        tile->mirroring = 2;
      }
      if (h3m::Tile* tile = safeGetTile(map, x + i + 3, y + i))
      {
        tile->terrain_sprite = generate_corner_coast_sprite();
        tile->mirroring = 1;
      }
    }
  }

  void drawFakeIslands(h3m::Map& map)
  {
    drawFakeIsland(map, 9, 9);
    drawFakeMiniIsland(map, 20, 8);
    drawFakeMiniIsland(map, 20, 10);
    drawFakeMiniIsland(map, 22, 9);
    drawFakeMiniIsland(map, 24, 11);
    drawFakeMiniIsland(map, 22, 12);
    drawFakeMiniIsland(map, 25, 9);
    drawFakeMiniIsland(map, 26, 13);
    drawFakeVerticalLandStrip(map, 10, 15, 10);
    drawFakeVerticalLandStrip(map, 12, 15, 10);
    drawFakeVerticalLandStrip(map, 14, 15, 10);
    drawFakeDiagonalLandStripSE(map, 20, 20, 10);
    drawFakeDiagonalLandStripSE(map, 24, 20, 10);
  }
}

int main(int argc, char** argv)
{
  if (argc != 2) {
    std::cout << "Usage: h3mparser map-path" << std::endl;
    return -1;
  }

  try
  {
    const fs::path path_map(argv[1]);
    std::ifstream stream(path_map, std::ios_base::in | std::ios_base::binary);
    const h3m::Map map = h3m::parseh3m(stream, true);
    stream.close();
    h3m::writeText(std::cout, map);
    std::ofstream out_stream("no_objects_or_events.h3m", std::ios_base::out | std::ios_base::binary);
    h3m::writeh3m(out_stream, map);

    {
      const fs::path test_map_path("test_map.h3m");
      std::ofstream out_stream(test_map_path, std::ios_base::out | std::ios_base::binary);
      h3m::Map test_map = generateTestMap();
      fillWithWaterTiles(test_map);
      drawFakeIslands(test_map);
      h3m::writeh3m(out_stream, test_map);
    }
  }
  catch (const std::exception& error)
  {
    std::cerr << error.what() << std::endl;
  }
  catch (...)
  {
    std::cerr << "Unknown error." << std::endl;
  }

  return 0;
}
